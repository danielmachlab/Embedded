
AVRASM ver. 2.2.7  C:\Users\ted\Dropbox\embedded\Embedded\Lab4\Lab4\main.asm Thu Mar 29 20:05:06 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m88padef.inc'
C:\Users\ted\Dropbox\embedded\Embedded\Lab4\Lab4\main.asm(6): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m88padef.inc'
C:\Users\ted\Dropbox\embedded\Embedded\Lab4\Lab4\main.asm(37): warning: Register r16 already defined by the .DEF directive
C:\Users\ted\Dropbox\embedded\Embedded\Lab4\Lab4\main.asm(38): warning: Register r17 already defined by the .DEF directive
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m88padef.inc'
C:\Users\ted\Dropbox\embedded\Embedded\Lab4\Lab4\main.asm(6): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m88padef.inc'
                                 
                                 ;;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega88PA.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m88PAdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega88PA
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega88PA
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M88PADEF_INC_
                                 #define _M88PADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega88PA
                                 #pragma AVRPART ADMIN PART_NAME ATmega88PA
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x93
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 0
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ	SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ	SIGRD	= 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x04ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 8192
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xc00
                                 .equ	NRWW_STOP_ADDR	= 0xfff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xbff
                                 .equ	PAGESIZE	= 32
                                 .equ	FIRSTBOOTSTART	= 0xf80
                                 .equ	SECONDBOOTSTART	= 0xf00
                                 .equ	THIRDBOOTSTART	= 0xe00
                                 .equ	FOURTHBOOTSTART	= 0xc00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0003	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0004	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x0005	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x0006	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x0007	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0008	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0009	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000b	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x000c	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x000d	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x000e	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x000f	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0010	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0011	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0012	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0013	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0014	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x0015	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0016	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0017	; Analog Comparator
                                 .equ	TWIaddr	= 0x0018	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0019	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 26	; size in words
                                 
                                 #endif  /* _M88PADEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;; Lab 4
                                 ;; Ted Paulsen, Daniel Machlab
                                 ;;
                                 
                                 .include "m88padef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega88PA.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m88PAdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega88PA
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega88PA
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M88PADEF_INC_
                                 #endif  /* _M88PADEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;; cbi is input sbi is output
000000 9820                      cbi DDRB, 0 ; input - from A
000001 9821                      cbi DDRB, 1 ; input - from B
000002 9a22                      sbi DDRB, 2 ; output - clockwise (A side) LED
000003 9a55                      sbi DDRD, 5 ; set pwm pin as output
                                 
                                 ;; E & RS LINES TO LCD
000004 9a23                      sbi DDRB, 3 ; output to E
000005 9a25                      sbi DDRB, 5 ; output to RS line of lcd
                                 
                                 ;; DATA LINES TO LCD
000006 9a3b                      sbi DDRC, 3 ; output PC3 - D7
000007 9a3a                      sbi DDRC, 2 ; output PC2 - D6
000008 9a39                      sbi DDRC, 1 ; output PC1 - D5
000009 9a38                      sbi DDRC, 0 ; output PC0 - D4
                                 
                                 ;; RPG readings
                                 .def curr = R20 ; R20 is the current rpg reading
                                 .def prev = R21 ; R21 is the previous rpg reading
                                 
                                 ;; LCD data
                                 .def write = R22
                                 .def duty_cycle = R23
                                 
                                 ;; divide registers
                                 .def drem16uL= r14
                                 .def drem16uH= r15
                                 .def dres16uL= r16
                                 .def dres16uH= r17
                                 .def dd16uL	= r16
                                 .def dd16uH	= r17
                                 .def dv16uL	= r18
                                 .def dv16uH	= r19
                                 
                                 ;; free registers: R24, R25, R26, R28
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; PUBLIC STATIC VOID MAIN 
                                 
00000a d005                      rcall mem_init
00000b d00b                      rcall start
                                 
00000c d08b                      rcall timer_config
                                 
00000d e674                      ldi duty_cycle, 100
00000e bd78                      out OCR0B, duty_cycle
00000f c057                      rjmp rpg_listener
                                 
                                 ;; END MAIN
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 mem_init:
000010 4344
000011 3d20
000012 0020                      	msg1: .db "DC = ", 0x00
000013 2020
000014 2025
000015 0020                      	msg2: .db "  %  ", 0x00
000016 9508                      	ret
                                 
                                 start:
                                 	;; INIT LCD
000017 982d                      	cbi PORTB, 5 ; set to command mode
000018 d086                      	rcall lcd_init
000019 9a2d                      	sbi PORTB, 5 ; set to data mode
                                 
                                 disp:
                                 	;; DISPLAY "DC = "
00001a e2e0                      	ldi r30, low(2*msg1)
00001b e0f0                      	ldi r31, high(2*msg1)
00001c d016                      	rcall displayCstring
                                 
                                 	;; DISPLAY DC VALUE
00001d e298                      	ldi R25, low(OCR0B)
00001e e0a0                      	ldi R26, high(OCR0B)
00001f d01e                      	rcall computeDC
                                 	
000020 e0e0                      	ldi R30, low(dtxt)
000021 e0f1                      	ldi R31, high(dtxt)
                                 
000022 d039                      	rcall displayDstring
                                 
000023 9508                      	ret
                                 	
                                 	
                                 
                                 ; load both prev and curr with same initial readings
000024 b143                      in curr, PINB ; load inputs into prev
000025 7043                      andi curr, 0b00000011 ; mask out all signals but A & B
000026 2f54                      mov prev, curr ; copy contents of curr into prev
000027 d0b7                      rcall delay_100ms ; delay a lil bit
                                 
                                 ; create static strings in memory
                                 ;msg1: .db "DC = ", 0x00 ;;mem reserved with .db must be an even number of bytes. If odd, padded with extra byte by assembler. 
                                 ;msg2: .db "% =", 0x00
                                 
                                 write_letter_A_to_lcd:
000028 d0b6                      	rcall delay_100ms
                                 	; set to data mode
000029 9a2d                      	sbi PORTB, 5
                                 	; write upper nibble
00002a e064                      	ldi write, 0b00000100
00002b b968                      	out PORTC, write
                                 
00002c d0ac                      	rcall lcd_strobe
00002d d0b1                      	rcall delay_100ms
                                 
                                 	; write lower nibble
00002e e061                      	ldi write, 0b00000001
00002f b968                      	out PORTC, write
000030 d0a8                      	rcall lcd_strobe
000031 d0ad                      	rcall delay_100ms
000032 9508                      	ret
                                 	
                                 displayCstring:
000033 9005                      	lpm r0,Z+ ; r0 <-- first byte
000034 2000                      	tst r0 ; Reached end of message ?
000035 f039                      	breq done_static ; Yes => quit
                                 
000036 9402                      	swap r0 ; Upper nibble in place
000037 b808                      	out PORTC,r0 ; Send upper nibble out
000038 d0a0                      	rcall lcd_strobe ; Latch nibble
                                 
                                 	//rcall delay_200us
000039 9402                      	swap r0 ; Lower nibble in place
00003a b808                      	out PORTC,r0 ; Send lower nibble out
00003b d09d                      	rcall lcd_strobe ; Latch nibble
                                 	//rcall delay_200us
00003c cff6                      	rjmp displayCstring
                                   done_static:
00003d 9508                      	ret
                                 
                                 computeDC:
                                   .dseg
000100                           	dtxt: .BYTE 5 ; allocate mem
                                 
                                   .cseg
                                 	;; set dividend
00003e 2f09                      	mov dd16uL, R25
00003f 2f1a                      	mov dd16uH, R26
                                 
                                 	;; set divisor
000040 e227                      	ldi dv16uL, low(OCR0A) ; OCR0B
000041 e030                      	ldi dv16uH, high(OCR0A)
                                 
                                 	; store terminating char for string
000042 e040                      	ldi R20, 0x00
000043 9340 0104                 	sts dtxt+4, R20
                                 
                                 	; divide the number by 10 and format
000045 d0b2                      	rcall div16u
000046 e340                      	ldi R20, 0x30
000047 0ee4                      	add R14, R20
000048 92e0 0103                 	sts dtxt+3, R14
                                 
                                 	; generate decimal point
00004a e24e                      	ldi R20, 0x2e
00004b 9340 0102                 	sts dtxt+2, R20
                                 
00004d 2f00                      	mov dd16uL, R16
00004e 2f11                      	mov dd16uH, R17
                                 
00004f d0a8                      	rcall div16u
000050 e340                      	ldi R20, 0x30
000051 0ee4                      	add R14, R20
000052 92e0 0101                 	sts dtxt+1, R14
                                 
000054 2f00                      	mov dd16uL, R16
000055 2f11                      	mov dd16uH, R17
                                 
000056 d0a1                      	rcall div16u
000057 e340                      	ldi R20, 0x30
000058 0ee4                      	add R14, R20
000059 92e0 0100                 	sts dtxt, R14
                                 	
00005b 9508                      	ret
                                 
                                 displayDstring:
00005c 9001                      	ld R0, Z+
00005d 2000                      	tst R0
00005e f039                      	breq done_dynamic
                                 
                                 	;; write upper nibble
00005f 9402                      	swap R0
000060 b808                      	out PORTC, R0
000061 d077                      	rcall lcd_strobe
                                 
                                 	;; write lower nibble
000062 9402                      	swap R0
000063 b808                      	out PORTC, R0
000064 d074                      	rcall lcd_strobe
                                 
000065 cff6                      	rjmp displayDstring
                                   done_dynamic:
000066 9508                      	ret
                                 
                                 
                                 rpg_listener:
                                 	;rcall lightoff
000067 b153                      	in prev, PINB
000068 7053                      	andi prev, 0b00000011
                                 
000069 d011                      	rcall lighton
                                 
                                 	;; delay
                                 
00006a d012                      	rcall lightoff
                                 
                                 	;rcall delay
00006b b143                      	in curr, PINB
00006c 7043                      	andi curr, 0b00000011
00006d 1754                      	cp prev, curr
00006e f409                      	brne rpg_handler
00006f cff7                      	rjmp rpg_listener 
                                 
                                 ; This is the infinite loop which reads new inputs
                                 ; and handles the changes
                                 rpg_handler:
000070 dfa9                      	rcall disp
                                 	;rcall lighton
                                 	
                                 	;rcall read_input
                                 	;rcall delay
000071 d00d                      	rcall test_rpg
                                 		
                                 	; check if AB == 00
000072 3010                      	cpi R17, 0b00000000 ; sets Z flag if R17 is 0
000073 f0a1                      	breq stationary ; branch if Z flag set, else continue
                                 
                                 	; check if AB == 01
000074 3011                      	cpi R17, 0b00000001 ; sets Z flag if the result of the dec operation is 0
000075 f0d9                      	breq counterclockwise ; originally clockwise ; branch if Z flag set, else continue
                                 
                                 	; check if AB == 10
000076 3012                      	cpi R17, 0b00000010 ; sets Z flag if the result of the dec operation is 0
000077 f089                      	breq clockwise; originally counterclockwise ; branch if Z flag set, else continue
                                 
                                 	; check if AB == 11
000078 3013                      	cpi R17, 0b00000011 ; sets Z flag if the result of the dec operation is 0
000079 f071                      	breq stationary ; branch if Z flag set, else continue
                                 
00007a cff5                      	rjmp rpg_handler ; finally, continue the loop
                                 
                                 lighton:
00007b 9a2a                      	sbi PORTB, 2
00007c 9508                      	ret
                                 
                                 lightoff:
00007d 982a                      	cbi PORTB, 2
00007e 9508                      	ret
                                 
                                 ; subroutine which transfers curr into prev
                                 ; and then loads new reading into curr
                                 ;read_input:
                                 ;	mov prev, curr ; copy current readings into prev
                                 ;	in curr, PINB ; load new readings
                                 ;	andi curr, 0b00000011 ; mask out only signals A & B
                                 ;	ret
                                 
                                 test_rpg:
00007f 3040                      	cpi curr, 0b00000000 ; if curr is 00, immediately xor with prev
000080 f029                      	breq exor_prev
                                 
000081 3043                      	cpi curr, 0b00000011 ; if curr is 11, immediately xor with prev
000082 f019                      	breq exor_prev
                                 
000083 2f14                      	mov R17, curr 
000084 e023                      	ldi R18, 0b00000011 
000085 2712                      	eor R17, R18 ; if curr had 10, R17 will be loaded with 01 
                                 
                                 exor_prev: 
000086 2715                      	eor R17, prev
000087 9508                      	ret
                                 	
                                 
                                 ; subroutine to handle when the rpg is stationary
                                 ; currently it turns off both LEDs
                                 stationary:
000088 cfde                      	rjmp rpg_listener
                                 
                                 ;; subroutine to hande when rpg is turning clockwise
                                 ;; if [OCR0B] == TOP -> do nothing
                                 ;; else increment
                                 clockwise:
000089 b5a8                      	in R26, OCR0B ; current duty cycle
00008a b5b7                      	in R27, OCR0A ; 200
00008b 17ab                      	cp R26, R27
00008c f409                      	brne incr
00008d cfd9                      	rjmp rpg_listener
                                   incr:
00008e 95a3                      	inc R26
00008f bda8                      	out OCR0B, R26
000090 cfd6                      	rjmp rpg_listener
                                 
                                 ;; subroutine to hande when rpg is turning counter-clockwise
                                 ;; if [OCR0B] == 0 -> decrement
                                 ;; else keep at zero
                                 counterclockwise:
000091 b5a8                      	in R26, OCR0B ; load value from OCROA
000092 23aa                      	tst R26
000093 f409                      	brne decr
000094 cfd2                      	rjmp rpg_listener
                                   decr:
000095 95aa                      	dec R26
000096 bda8                      	out OCR0B, R26
000097 cfcf                      	rjmp rpg_listener
                                 
                                 timer_config:
000098 e2e3                      	ldi R30, 0b00100011 ; WGM01, WGM00 <= 1, 1
000099 bde4                      	out TCCR0A, R30
00009a e0e9                      	ldi R30, 0b00001001 ; No prescale
00009b bde5                      	out TCCR0B, R30
00009c ece8                      	ldi R30, 0xC8 ; OCRA <= 200 (set TOP to 200)
00009d bde7                      	out OCR0A, R30
00009e 9508                      	ret
                                 
                                 lcd_init:
00009f d03f                      	rcall delay_100ms ; line 1 -- 100 ms
                                 	
0000a0 e0a3                      	ldi R26, 0x03
0000a1 b9a8                      	out PORTC, R26 ; line 2 -- write 0x03 with RS=0 (set to 8-bit mode)
0000a2 d036                      	rcall lcd_strobe
                                 
0000a3 d045                      	rcall delay_5ms ; line 3 -- 5 ms
                                 	
0000a4 e0a3                      	ldi R26, 0x03
0000a5 b9a8                      	out PORTC, R26 ; line 4 -- write 0x03 with RS=0 (set to 8-bit mode)
0000a6 d032                      	rcall lcd_strobe
                                 
0000a7 d049                      	rcall delay_200us ; line 5	
                                 	 
0000a8 e0a3                      	ldi R26, 0x03
0000a9 b9a8                      	out PORTC, R26 ;line 6 -- write 0x03 with RS=0 (set to 8-bit mode)
0000aa d02e                      	rcall lcd_strobe
                                 
0000ab d045                      	rcall delay_200us ; line 7 	 
                                 
0000ac e0a2                      	ldi R26, 0x02
0000ad b9a8                      	out PORTC, R26 ;line 8 -- write 0x02 with RS=0 (set to 4-bit mode)
0000ae d02a                      	rcall lcd_strobe
                                 
0000af d039                      	rcall delay_5ms ; line 9
                                 		
0000b0 e0a2                      	ldi R26, 0x02
0000b1 b9a8                      	out PORTC, R26 ; line 10a -- write 28 hex (upper nibble then lower nibble) 
0000b2 d026                      	rcall lcd_strobe
                                 
0000b3 d03d                      	rcall delay_200us
                                 
0000b4 e0a8                      	ldi R26, 0x08
0000b5 b9a8                      	out PORTC, R26; line 10b -- lower nibble
0000b6 d022                      	rcall lcd_strobe
                                 
0000b7 d039                      	rcall delay_200us
                                 
0000b8 e0a0                      	ldi R26, 0x00
0000b9 b9a8                      	out PORTC, R26 ; line 11a -- write 08 hex (upper nibble then lower nibble)
0000ba d01e                      	rcall lcd_strobe
                                 
0000bb d035                      	rcall delay_200us
                                 	
0000bc e0a8                      	ldi R26, 0x08
0000bd b9a8                      	out PORTC, R26 ; line 11b -- lower nibble
0000be d01a                      	rcall lcd_strobe
                                 
0000bf d031                      	rcall delay_200us
                                 
0000c0 e0a0                      	ldi R26, 0x00
0000c1 b9a8                      	out PORTC, R26 ; line 11a -- write 08 hex (upper nibble then lower nibble)
0000c2 d016                      	rcall lcd_strobe
                                 
0000c3 d02d                      	rcall delay_200us
                                 	
0000c4 e0a1                      	ldi R26, 0x01
0000c5 b9a8                      	out PORTC, R26 ; line 11b -- lower nibble
0000c6 d012                      	rcall lcd_strobe
                                 
0000c7 d021                      	rcall delay_5ms 
                                 
0000c8 e0a0                      	ldi R26, 0x00
0000c9 b9a8                      	out PORTC, R26 ; line 12a -- write 01 hex (upper nibble then lower nibble)
0000ca d00e                      	rcall lcd_strobe
                                 
0000cb d025                      	rcall delay_200us
                                 
0000cc e0a6                      	ldi R26, 0x06
0000cd b9a8                      	out PORTC, R26 ; line 12b -- lower nibble
0000ce d00a                      	rcall lcd_strobe
                                 
0000cf d019                      	rcall delay_5ms
                                 
0000d0 e0a0                      	ldi R26, 0x00
0000d1 b9a8                      	out PORTC, R26; line 13a -- write 06 hex (upper nibble then lower nibble)
0000d2 d006                      	rcall lcd_strobe
                                 
0000d3 d01d                      	rcall delay_200us
                                 
0000d4 e0ac                      	ldi R26, 0x0C
0000d5 b9a8                      	out PORTC, R26 ; line 13b -- lower nibble
0000d6 d002                      	rcall lcd_strobe
                                 
0000d7 d011                      	rcall delay_5ms
0000d8 9508                      	ret
                                 
                                 lcd_strobe:
0000d9 982b                      	cbi PORTB, 3 ; drive E low
0000da d016                      	rcall delay_200us ; delay
0000db 9a2b                      	sbi PORTB, 3 ; drive E hight 
0000dc d014                      	rcall delay_200us
0000dd 982b                      	cbi PORTB, 3 ; drive E low
0000de 9508                      	ret
                                 
                                 
                                 delay_100ms:
                                     ; 100ms at 8 MHz
0000df e026                      		ldi  r18, 6
0000e0 e03f                      		ldi  r19, 15
0000e1 ef42                      		ldi  r20, 242
0000e2 954a                      	L1: dec  r20
0000e3 f7f1                      		brne L1
0000e4 953a                      		dec  r19
0000e5 f7e1                      		brne L1
0000e6 952a                      		dec  r18
0000e7 f7d1                      		brne L1
0000e8 9508                      		ret
                                 
                                 delay_5ms:
0000e9 e325                      		ldi  r18, 53
0000ea ef32                      		ldi  r19, 242
0000eb 953a                      	L2: dec  r19
0000ec f7f1                      		brne L2
0000ed 952a                      		dec  r18
0000ee f7e1                      		brne L2
0000ef 0000                      		nop
0000f0 9508                      		ret
                                 
                                 delay_200us:
0000f1 e024                      		ldi  r18, 4
0000f2 e133                      		ldi  r19, 19
0000f3 953a                      	L3: dec  r19
0000f4 f7f1                      		brne L3
0000f5 952a                      		dec  r18
0000f6 f7e1                      		brne L3
0000f7 9508                      		ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Divide 16 bit number routine from Atmel ;;
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000f8 24ee                      div16u:	clr	drem16uL	;clear remainder Low byte
0000f9 18ff                      	sub	drem16uH,drem16uH;clear remainder High byte and carry
                                 
0000fa 1f00                      	rol	dd16uL		;shift left dividend
0000fb 1f11                      	rol	dd16uH
0000fc 1cee                      	rol	drem16uL	;shift dividend into remainder
0000fd 1cff                      	rol	drem16uH
0000fe 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
0000ff 0af3                      	sbc	drem16uH,dv16uH	;
000100 f420                      	brcc	d16u_1		;if result negative
000101 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
000102 1ef3                      	adc	drem16uH,dv16uH
000103 9488                      	clc			;    clear carry to be shifted into result
000104 c001                      	rjmp	d16u_2		;else
000105 9408                      d16u_1:	sec			;    set carry to be shifted into result
                                 
000106 1f00                      d16u_2:	rol	dd16uL		;shift left dividend
000107 1f11                      	rol	dd16uH
000108 1cee                      	rol	drem16uL	;shift dividend into remainder
000109 1cff                      	rol	drem16uH
00010a 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
00010b 0af3                      	sbc	drem16uH,dv16uH	;
00010c f420                      	brcc	d16u_3		;if result negative
00010d 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
00010e 1ef3                      	adc	drem16uH,dv16uH
00010f 9488                      	clc			;    clear carry to be shifted into result
000110 c001                      	rjmp	d16u_4		;else
000111 9408                      d16u_3:	sec			;    set carry to be shifted into result
                                 
000112 1f00                      d16u_4:	rol	dd16uL		;shift left dividend
000113 1f11                      	rol	dd16uH
000114 1cee                      	rol	drem16uL	;shift dividend into remainder
000115 1cff                      	rol	drem16uH
000116 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
000117 0af3                      	sbc	drem16uH,dv16uH	;
000118 f420                      	brcc	d16u_5		;if result negative
000119 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
00011a 1ef3                      	adc	drem16uH,dv16uH
00011b 9488                      	clc			;    clear carry to be shifted into result
00011c c001                      	rjmp	d16u_6		;else
00011d 9408                      d16u_5:	sec			;    set carry to be shifted into result
                                 
00011e 1f00                      d16u_6:	rol	dd16uL		;shift left dividend
00011f 1f11                      	rol	dd16uH
000120 1cee                      	rol	drem16uL	;shift dividend into remainder
000121 1cff                      	rol	drem16uH
000122 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
000123 0af3                      	sbc	drem16uH,dv16uH	;
000124 f420                      	brcc	d16u_7		;if result negative
000125 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
000126 1ef3                      	adc	drem16uH,dv16uH
000127 9488                      	clc			;    clear carry to be shifted into result
000128 c001                      	rjmp	d16u_8		;else
000129 9408                      d16u_7:	sec			;    set carry to be shifted into result
                                 
00012a 1f00                      d16u_8:	rol	dd16uL		;shift left dividend
00012b 1f11                      	rol	dd16uH
00012c 1cee                      	rol	drem16uL	;shift dividend into remainder
00012d 1cff                      	rol	drem16uH
00012e 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
00012f 0af3                      	sbc	drem16uH,dv16uH	;
000130 f420                      	brcc	d16u_9		;if result negative
000131 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
000132 1ef3                      	adc	drem16uH,dv16uH
000133 9488                      	clc			;    clear carry to be shifted into result
000134 c001                      	rjmp	d16u_10		;else
000135 9408                      d16u_9:	sec			;    set carry to be shifted into result
                                 
000136 1f00                      d16u_10:rol	dd16uL		;shift left dividend
000137 1f11                      	rol	dd16uH
000138 1cee                      	rol	drem16uL	;shift dividend into remainder
000139 1cff                      	rol	drem16uH
00013a 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
00013b 0af3                      	sbc	drem16uH,dv16uH	;
00013c f420                      	brcc	d16u_11		;if result negative
00013d 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
00013e 1ef3                      	adc	drem16uH,dv16uH
00013f 9488                      	clc			;    clear carry to be shifted into result
000140 c001                      	rjmp	d16u_12		;else
000141 9408                      d16u_11:sec			;    set carry to be shifted into result
                                 
000142 1f00                      d16u_12:rol	dd16uL		;shift left dividend
000143 1f11                      	rol	dd16uH
000144 1cee                      	rol	drem16uL	;shift dividend into remainder
000145 1cff                      	rol	drem16uH
000146 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
000147 0af3                      	sbc	drem16uH,dv16uH	;
000148 f420                      	brcc	d16u_13		;if result negative
000149 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
00014a 1ef3                      	adc	drem16uH,dv16uH
00014b 9488                      	clc			;    clear carry to be shifted into result
00014c c001                      	rjmp	d16u_14		;else
00014d 9408                      d16u_13:sec			;    set carry to be shifted into result
                                 
00014e 1f00                      d16u_14:rol	dd16uL		;shift left dividend
00014f 1f11                      	rol	dd16uH
000150 1cee                      	rol	drem16uL	;shift dividend into remainder
000151 1cff                      	rol	drem16uH
000152 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
000153 0af3                      	sbc	drem16uH,dv16uH	;
000154 f420                      	brcc	d16u_15		;if result negative
000155 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
000156 1ef3                      	adc	drem16uH,dv16uH
000157 9488                      	clc			;    clear carry to be shifted into result
000158 c001                      	rjmp	d16u_16		;else
000159 9408                      d16u_15:sec			;    set carry to be shifted into result
                                 
00015a 1f00                      d16u_16:rol	dd16uL		;shift left dividend
00015b 1f11                      	rol	dd16uH
00015c 1cee                      	rol	drem16uL	;shift dividend into remainder
00015d 1cff                      	rol	drem16uH
00015e 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
00015f 0af3                      	sbc	drem16uH,dv16uH	;
000160 f420                      	brcc	d16u_17		;if result negative
000161 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
000162 1ef3                      	adc	drem16uH,dv16uH
000163 9488                      	clc			;    clear carry to be shifted into result
000164 c001                      	rjmp	d16u_18		;else
000165 9408                      d16u_17:	sec			;    set carry to be shifted into result
                                 
000166 1f00                      d16u_18:rol	dd16uL		;shift left dividend
000167 1f11                      	rol	dd16uH
000168 1cee                      	rol	drem16uL	;shift dividend into remainder
000169 1cff                      	rol	drem16uH
00016a 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
00016b 0af3                      	sbc	drem16uH,dv16uH	;
00016c f420                      	brcc	d16u_19		;if result negative
00016d 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
00016e 1ef3                      	adc	drem16uH,dv16uH
00016f 9488                      	clc			;    clear carry to be shifted into result
000170 c001                      	rjmp	d16u_20		;else
000171 9408                      d16u_19:sec			;    set carry to be shifted into result
                                 
000172 1f00                      d16u_20:rol	dd16uL		;shift left dividend
000173 1f11                      	rol	dd16uH
000174 1cee                      	rol	drem16uL	;shift dividend into remainder
000175 1cff                      	rol	drem16uH
000176 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
000177 0af3                      	sbc	drem16uH,dv16uH	;
000178 f420                      	brcc	d16u_21		;if result negative
000179 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
00017a 1ef3                      	adc	drem16uH,dv16uH
00017b 9488                      	clc			;    clear carry to be shifted into result
00017c c001                      	rjmp	d16u_22		;else
00017d 9408                      d16u_21:sec			;    set carry to be shifted into result
                                 
00017e 1f00                      d16u_22:rol	dd16uL		;shift left dividend
00017f 1f11                      	rol	dd16uH
000180 1cee                      	rol	drem16uL	;shift dividend into remainder
000181 1cff                      	rol	drem16uH
000182 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
000183 0af3                      	sbc	drem16uH,dv16uH	;
000184 f420                      	brcc	d16u_23		;if result negative
000185 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
000186 1ef3                      	adc	drem16uH,dv16uH
000187 9488                      	clc			;    clear carry to be shifted into result
000188 c001                      	rjmp	d16u_24		;else
000189 9408                      d16u_23:sec			;    set carry to be shifted into result
                                 
00018a 1f00                      d16u_24:rol	dd16uL		;shift left dividend
00018b 1f11                      	rol	dd16uH
00018c 1cee                      	rol	drem16uL	;shift dividend into remainder
00018d 1cff                      	rol	drem16uH
00018e 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
00018f 0af3                      	sbc	drem16uH,dv16uH	;
000190 f420                      	brcc	d16u_25		;if result negative
000191 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
000192 1ef3                      	adc	drem16uH,dv16uH
000193 9488                      	clc			;    clear carry to be shifted into result
000194 c001                      	rjmp	d16u_26		;else
000195 9408                      d16u_25:sec			;    set carry to be shifted into result
                                 
000196 1f00                      d16u_26:rol	dd16uL		;shift left dividend
000197 1f11                      	rol	dd16uH
000198 1cee                      	rol	drem16uL	;shift dividend into remainder
000199 1cff                      	rol	drem16uH
00019a 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
00019b 0af3                      	sbc	drem16uH,dv16uH	;
00019c f420                      	brcc	d16u_27		;if result negative
00019d 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
00019e 1ef3                      	adc	drem16uH,dv16uH
00019f 9488                      	clc			;    clear carry to be shifted into result
0001a0 c001                      	rjmp	d16u_28		;else
0001a1 9408                      d16u_27:sec			;    set carry to be shifted into result
                                 
0001a2 1f00                      d16u_28:rol	dd16uL		;shift left dividend
0001a3 1f11                      	rol	dd16uH
0001a4 1cee                      	rol	drem16uL	;shift dividend into remainder
0001a5 1cff                      	rol	drem16uH
0001a6 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
0001a7 0af3                      	sbc	drem16uH,dv16uH	;
0001a8 f420                      	brcc	d16u_29		;if result negative
0001a9 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
0001aa 1ef3                      	adc	drem16uH,dv16uH
0001ab 9488                      	clc			;    clear carry to be shifted into result
0001ac c001                      	rjmp	d16u_30		;else
0001ad 9408                      d16u_29:sec			;    set carry to be shifted into result
                                 
0001ae 1f00                      d16u_30:rol	dd16uL		;shift left dividend
0001af 1f11                      	rol	dd16uH
0001b0 1cee                      	rol	drem16uL	;shift dividend into remainder
0001b1 1cff                      	rol	drem16uH
0001b2 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
0001b3 0af3                      	sbc	drem16uH,dv16uH	;
0001b4 f420                      	brcc	d16u_31		;if result negative
0001b5 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
0001b6 1ef3                      	adc	drem16uH,dv16uH
0001b7 9488                      	clc			;    clear carry to be shifted into result
0001b8 c001                      	rjmp	d16u_32		;else
0001b9 9408                      d16u_31:sec			;    set carry to be shifted into result
                                 
0001ba 1f00                      d16u_32:rol	dd16uL		;shift left dividend
0001bb 1f11                      	rol	dd16uH


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega88PA" register use summary:
x  :   0 y  :   0 z  :   2 r0 :  12 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:  55 r15:  50 r16:  22 r17:  29 r18:  41 r19:  39 r20:  21 
r21:   5 r22:   4 r23:   2 r24:   0 r25:   2 r26:  38 r27:   2 r28:   0 
r29:   0 r30:   8 r31:   2 
Registers used: 17 out of 35 (48.6%)

"ATmega88PA" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  16 add   :  19 adiw  :   0 and   :   0 
andi  :   3 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :  16 brcs  :   0 break :   0 breq  :   8 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 cbi   :   6 cbr   :   0 clc   :  16 
clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 clt   :   0 
clv   :   0 clz   :   0 com   :   0 cp    :   2 cpc   :   0 cpi   :   6 
cpse  :   0 dec   :   8 eor   :   2 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :   6 inc   :   1 ld    :   1 ldd   :   0 
ldi   :  41 lds   :   0 lpm   :   1 lsl   :   0 lsr   :   0 mov   :   8 
movw  :   0 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   1 
or    :   0 ori   :   0 out   :  26 pop   :   0 push  :   0 rcall :  55 
ret   :  16 reti  :   0 rjmp  :  26 rol   :  66 ror   :   0 sbc   :  16 
sbci  :   0 sbi   :  12 sbic  :   0 sbis  :   0 sbiw  :   0 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :  16 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :   0 std   :   0 sts   :   5 sub   :  17 subi  :   0 
swap  :   4 tst   :   3 wdr   :   0 
Instructions used: 32 out of 111 (28.8%)

"ATmega88PA" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00037a    878     12    890    8192  10.9%
[.dseg] 0x000100 0x000105      0      5      5    1024   0.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 2 warnings
